#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include "stm32f10x.h"

volatile uint32_t verificaLED = 0;
volatile uint32_t lastButtonState = 0;

void SysTick_Handler()
{
    // Lê o estado da Tecla 1 (pino PA0)
    uint32_t currentButtonState = GPIOA->IDR & (1 << 0);

    // Verifica se a Tecla 1 foi pressionada
    if(currentButtonState != lastButtonState)
    {
        lastButtonState = currentButtonState;
        if(currentButtonState == 0) // Verifica se a Tecla 1 está pressionada
        {
            // Troca para o próximo LED da lista
            verificaLED = (verificaLED + 1) % 3;
        }
    }

    // Apaga todos os LEDs
    GPIOB->BSRR = (1 << (11 + 16)) | (1 << (12 + 16)) | (1 << (13 + 16));

    // Acende o LED atual com base no estado do LED
    switch(verificaLED)
    {
        case 0:
            GPIOB->BSRR = (1 << 11); // Acende o LED 1
            break;
        case 1:
            GPIOB->BSRR = (1 << 12); // Acende o LED 2
            break;
        case 2:
            GPIOB->BSRR = (1 << 13); // Acende o LED 3
            break;
    }
}

int main(void)
{
    // Habilita o GPIOB e GPIOA
    RCC->APB2ENR = 0x0000000C;

    // Configura os pinos PB11, PB12 e PB13 como saída
     GPIOB->CRH = 0x44443444; 

    // Habilita o GPIOA para Tecla 1 (suponhamos que esteja no pino PA0)
    RCC->APB2ENR |= (1 << 2);

    // Configura o pino PA0 como entrada
    GPIOA->CRL &= ~(0xF); // Limpa os bits de configuração 

    // Configura o SysTick para gerar uma interrupção a cada 1s
    SysTick->LOAD = 800000 - 1; // 1 segundo (em microssegundos)
    SysTick->CTRL = 0x00000007;  // Habilita o SysTick e a interrupção

    while (1)
    {
        
    }
}
